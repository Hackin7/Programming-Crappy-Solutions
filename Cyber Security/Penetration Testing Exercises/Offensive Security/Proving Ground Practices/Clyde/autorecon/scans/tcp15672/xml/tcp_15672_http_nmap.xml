<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE nmaprun>
<?xml-stylesheet href="file:///usr/bin/../share/nmap/nmap.xsl" type="text/xsl"?>
<!-- Nmap 7.92 scan initiated Sun Jan 30 17:06:01 2022 as: nmap -vv -&#45;reason -Pn -T4 -sV -p 15672 &quot;-&#45;script=banner,(http* or ssl*) and not (brute or broadcast or dos or external or http-slowloris* or fuzzer)&quot; -oN /root/autorecon/results/192.168.139.68/scans/tcp15672/tcp_15672_http_nmap.txt -oX /root/autorecon/results/192.168.139.68/scans/tcp15672/xml/tcp_15672_http_nmap.xml 192.168.139.68 -->
<nmaprun scanner="nmap" args="nmap -vv -&#45;reason -Pn -T4 -sV -p 15672 &quot;-&#45;script=banner,(http* or ssl*) and not (brute or broadcast or dos or external or http-slowloris* or fuzzer)&quot; -oN /root/autorecon/results/192.168.139.68/scans/tcp15672/tcp_15672_http_nmap.txt -oX /root/autorecon/results/192.168.139.68/scans/tcp15672/xml/tcp_15672_http_nmap.xml 192.168.139.68" start="1643533561" startstr="Sun Jan 30 17:06:01 2022" version="7.92" xmloutputversion="1.05">
<scaninfo type="syn" protocol="tcp" numservices="1" services="15672"/>
<verbose level="2"/>
<debugging level="0"/>
<taskbegin task="NSE" time="1643533562"/>
<taskend task="NSE" time="1643533562"/>
<taskbegin task="NSE" time="1643533562"/>
<taskend task="NSE" time="1643533562"/>
<taskbegin task="NSE" time="1643533562"/>
<taskend task="NSE" time="1643533562"/>
<taskbegin task="Parallel DNS resolution of 1 host." time="1643533562"/>
<taskend task="Parallel DNS resolution of 1 host." time="1643533563"/>
<taskbegin task="SYN Stealth Scan" time="1643533563"/>
<taskend task="SYN Stealth Scan" time="1643533563" extrainfo="1 total ports"/>
<taskbegin task="Service scan" time="1643533563"/>
<taskend task="Service scan" time="1643533574" extrainfo="1 service on 1 host"/>
<taskbegin task="NSE" time="1643533574"/>
<taskprogress task="NSE" time="1643533605" percent="98.37" remaining="1" etc="1643533606"/>
<taskprogress task="NSE" time="1643533635" percent="98.37" remaining="2" etc="1643533636"/>
<taskprogress task="NSE" time="1643533665" percent="99.35" remaining="1" etc="1643533666"/>
<taskprogress task="NSE" time="1643533695" percent="99.67" remaining="1" etc="1643533695"/>
<taskprogress task="NSE" time="1643533725" percent="99.67" remaining="1" etc="1643533725"/>
<taskprogress task="NSE" time="1643533755" percent="99.67" remaining="1" etc="1643533756"/>
<taskprogress task="NSE" time="1643533785" percent="99.67" remaining="1" etc="1643533786"/>
<taskprogress task="NSE" time="1643533815" percent="99.67" remaining="1" etc="1643533816"/>
<taskprogress task="NSE" time="1643533845" percent="99.67" remaining="1" etc="1643533846"/>
<taskprogress task="NSE" time="1643533875" percent="99.67" remaining="1" etc="1643533876"/>
<taskprogress task="NSE" time="1643533905" percent="99.67" remaining="2" etc="1643533906"/>
<taskprogress task="NSE" time="1643533935" percent="99.67" remaining="2" etc="1643533936"/>
<taskprogress task="NSE" time="1643533965" percent="99.67" remaining="2" etc="1643533966"/>
<taskprogress task="NSE" time="1643533995" percent="99.67" remaining="2" etc="1643533996"/>
<taskprogress task="NSE" time="1643534025" percent="99.67" remaining="2" etc="1643534026"/>
<taskprogress task="NSE" time="1643534055" percent="99.67" remaining="2" etc="1643534057"/>
<taskprogress task="NSE" time="1643534085" percent="99.67" remaining="2" etc="1643534087"/>
<taskprogress task="NSE" time="1643534115" percent="99.67" remaining="2" etc="1643534117"/>
<taskend task="NSE" time="1643534141"/>
<taskbegin task="NSE" time="1643534141"/>
<taskend task="NSE" time="1643534142"/>
<taskbegin task="NSE" time="1643534142"/>
<taskend task="NSE" time="1643534142"/>
<host starttime="1643533563" endtime="1643534142"><status state="up" reason="user-set" reason_ttl="0"/>
<address addr="192.168.139.68" addrtype="ipv4"/>
<hostnames>
</hostnames>
<ports><port protocol="tcp" portid="15672"><state state="open" reason="syn-ack" reason_ttl="63"/><service name="http" product="Cowboy httpd" method="probed" conf="10"><cpe>cpe:/a:ninenines:cowboy</cpe></service><script id="http-server-header" output="Cowboy"><elem>Cowboy</elem>
</script><script id="http-comments-displayer" output="&#xa;Spidering limited to: maxdepth=3; maxpagecount=20; withinhost=192.168.139.68&#xa;    &#xa;    Path: http://192.168.139.68:15672/js/json2-2016.10.28.js&#xa;    Line number: 116&#xa;    Comment: &#xa;        &#xa;        //                      return new Date(Date.UTC(+a[1], +a[2] - 1, +a[3], +a[4],&#xa;    &#xa;    Path: http://192.168.139.68:15672/js/json2-2016.10.28.js&#xa;    Line number: 31&#xa;    Comment: &#xa;        &#xa;        //          stringified. A toJSON method does not serialize: it returns the&#xa;    &#xa;    Path: http://192.168.139.68:15672/js/json2-2016.10.28.js&#xa;    Line number: 228&#xa;    Comment: &#xa;         // The member key.&#xa;    &#xa;    Path: http://192.168.139.68:15672/js/json2-2016.10.28.js&#xa;    Line number: 67&#xa;    Comment: &#xa;        &#xa;        //          dropped; in arrays they will be replaced with null. You can use&#xa;    &#xa;    Path: http://192.168.139.68:15672/js/main.js&#xa;    Line number: 1199&#xa;    Comment: &#xa;         // MSIE: could not connect&#xa;    &#xa;    Path: http://192.168.139.68:15672/js/base64.js&#xa;    Line number: 1&#xa;    Comment: &#xa;        /*&#xa;         * Copyright (c) 2010 Nick Galbreath&#xa;         * http://code.google.com/p/stringencoders/source/browse/#svn/trunk/javascript&#xa;         *&#xa;         * Permission is hereby granted, free of charge, to any person&#xa;         * obtaining a copy of this software and associated documentation&#xa;         * files (the &quot;Software&quot;), to deal in the Software without&#xa;         * restriction, including without limitation the rights to use,&#xa;         * copy, modify, merge, publish, distribute, sublicense, and/or sell&#xa;         * copies of the Software, and to permit persons to whom the&#xa;         * Software is furnished to do so, subject to the following&#xa;         * conditions:&#xa;         *&#xa;         * The above copyright notice and this permission notice shall be&#xa;         * included in all copies or substantial portions of the Software.&#xa;         *&#xa;         * THE SOFTWARE IS PROVIDED &quot;AS IS&quot;, WITHOUT WARRANTY OF ANY KIND,&#xa;         * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES&#xa;         * OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND&#xa;         * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT&#xa;         * HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,&#xa;         * WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING&#xa;         * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR&#xa;         * OTHER DEALINGS IN THE SOFTWARE.&#xa;        */&#xa;    &#xa;    Path: http://192.168.139.68:15672/js/formatters.js&#xa;    Line number: 573&#xa;    Comment: &#xa;         // mask password&#xa;    &#xa;    Path: http://192.168.139.68:15672/js/global.js&#xa;    Line number: 597&#xa;    Comment: &#xa;        &#xa;        // Which vhost are we looking at&#xa;    &#xa;    Path: http://192.168.139.68:15672/js/json2-2016.10.28.js&#xa;    Line number: 51&#xa;    Comment: &#xa;        &#xa;        //                       f(this.getUTCSeconds())   + &quot;Z&quot;;&#xa;    &#xa;    Path: http://192.168.139.68:15672/js/main.js&#xa;    Line number: 1139&#xa;    Comment: &#xa;         // 0x80004004 means &quot;Operation aborted.&quot;&#xa;    &#xa;    Path: http://192.168.139.68:15672/js/global.js&#xa;    Line number: 7&#xa;    Comment: &#xa;        &#xa;        // Just used below&#xa;    &#xa;    Path: http://192.168.139.68:15672/js/json2-2016.10.28.js&#xa;    Line number: 361&#xa;    Comment: &#xa;        &#xa;        // If the JSON object does not yet have a stringify method, give it one.&#xa;    &#xa;    Path: http://192.168.139.68:15672/js/json2-2016.10.28.js&#xa;    Line number: 469&#xa;    Comment: &#xa;        &#xa;        // We split the second stage into 4 regexp operations in order to work around&#xa;    &#xa;    Path: http://192.168.139.68:15672/js/formatters.js&#xa;    Line number: 513&#xa;    Comment: &#xa;         // Only connections can be &apos;blocked&apos; or &apos;blocking&apos;&#xa;    &#xa;    Path: http://192.168.139.68:15672/js/json2-2016.10.28.js&#xa;    Line number: 242&#xa;    Comment: &#xa;        &#xa;        // If we were called with a replacer function, then call the replacer to&#xa;    &#xa;    Path: http://192.168.139.68:15672/js/json2-2016.10.28.js&#xa;    Line number: 464&#xa;    Comment: &#xa;        &#xa;        // In the second stage, we run the text against regular expressions that look&#xa;    &#xa;    Path: http://192.168.139.68:15672/js/json2-2016.10.28.js&#xa;    Line number: 257&#xa;    Comment: &#xa;        &#xa;        // JSON numbers must be finite. Encode non-finite numbers as null.&#xa;    &#xa;    Path: http://192.168.139.68:15672/js/main.js&#xa;    Line number: 100&#xa;    Comment: &#xa;         // behind if (Sammy.HashLocationProxy._interval != null). And of&#xa;    &#xa;    Path: http://192.168.139.68:15672/js/main.js&#xa;    Line number: 897&#xa;    Comment: &#xa;         // Workaround for... something. Although div.hider is&#xa;    &#xa;    Path: http://192.168.139.68:15672/js/json2-2016.10.28.js&#xa;    Line number: 97&#xa;    Comment: &#xa;        &#xa;        //          It can throw a SyntaxError exception.&#xa;    &#xa;    Path: http://192.168.139.68:15672/js/json2-2016.10.28.js&#xa;    Line number: 80&#xa;    Comment: &#xa;        &#xa;        //          Example:&#xa;    &#xa;    Path: http://192.168.139.68:15672/js/global.js&#xa;    Line number: 33&#xa;    Comment: &#xa;        &#xa;        // Both the above&#xa;    &#xa;    Path: http://192.168.139.68:15672/js/json2-2016.10.28.js&#xa;    Line number: 27&#xa;    Comment: &#xa;        &#xa;        //                      it contains the characters used to indent at each level.&#xa;    &#xa;    Path: http://192.168.139.68:15672/js/json2-2016.10.28.js&#xa;    Line number: 43&#xa;    Comment: &#xa;        &#xa;        //                          ? &quot;0&quot; + n&#xa;    &#xa;    Path: http://192.168.139.68:15672/js/global.js&#xa;    Line number: 626&#xa;    Comment: &#xa;        &#xa;        // whenever a UI requests a page that doesn&apos;t exist&#xa;    &#xa;    Path: http://192.168.139.68:15672/js/json2-2016.10.28.js&#xa;    Line number: 39&#xa;    Comment: &#xa;        &#xa;        //              Date.prototype.toJSON = function (key) {&#xa;    &#xa;    Path: http://192.168.139.68:15672/js/jquery.flot-0.8.1.min.js&#xa;    Line number: 7&#xa;    Comment: &#xa;        &#xa;        // for convenience&#xa;    &#xa;    Path: http://192.168.139.68:15672/js/main.js&#xa;    Line number: 749&#xa;    Comment: &#xa;         // TODO remove this hack when we get rid of &quot;updatable&quot;&#xa;    &#xa;    Path: http://192.168.139.68:15672/js/json2-2016.10.28.js&#xa;    Line number: 103&#xa;    Comment: &#xa;        &#xa;        //          If it returns undefined then the member is deleted.&#xa;    &#xa;    Path: http://192.168.139.68:15672/js/json2-2016.10.28.js&#xa;    Line number: 78&#xa;    Comment: &#xa;        &#xa;        //          the indentation will be that many spaces.&#xa;    &#xa;    Path: http://192.168.139.68:15672/js/main.js&#xa;    Line number: 1141&#xa;    Comment: &#xa;         // MSIE6 appears to do this in response to HTTP 204.&#xa;    &#xa;    Path: http://192.168.139.68:15672/js/main.js&#xa;    Line number: 20&#xa;    Comment: &#xa;         // clear a local storage value used by earlier versions&#xa;    &#xa;    Path: http://192.168.139.68:15672/js/json2-2016.10.28.js&#xa;    Line number: 139&#xa;    Comment: &#xa;        /*jslint&#xa;            eval, for, this&#xa;        */&#xa;    &#xa;    Path: http://192.168.139.68:15672/js/charts.js&#xa;    Line number: 288&#xa;    Comment: &#xa;         // TODO This doesn&apos;t work well if you are looking at&#xa;    &#xa;    Path: http://192.168.139.68:15672/js/main.js&#xa;    Line number: 1202&#xa;    Comment: &#xa;         // Proxy: could not connect&#xa;    &#xa;    Path: http://192.168.139.68:15672/js/json2-2016.10.28.js&#xa;    Line number: 92&#xa;    Comment: &#xa;        &#xa;        //          });&#xa;    &#xa;    Path: http://192.168.139.68:15672/js/global.js&#xa;    Line number: 584&#xa;    Comment: &#xa;        &#xa;        // Which top level template we&apos;re showing&#xa;    &#xa;    Path: http://192.168.139.68:15672/js/json2-2016.10.28.js&#xa;    Line number: 70&#xa;    Comment: &#xa;        &#xa;        //          JSON.stringify(undefined) returns undefined.&#xa;    &#xa;    Path: http://192.168.139.68:15672/js/main.js&#xa;    Line number: 103&#xa;    Comment: &#xa;         // work in MSIE.&#xa;    &#xa;    Path: http://192.168.139.68:15672/js/global.js&#xa;    Line number: 500&#xa;    Comment: &#xa;        &#xa;        // Extensions write to this, the dispatcher maker reads it&#xa;    &#xa;    Path: http://192.168.139.68:15672/js/json2-2016.10.28.js&#xa;    Line number: 375&#xa;    Comment: &#xa;        &#xa;        // The stringify method takes a value and an optional replacer, and an optional&#xa;    &#xa;    Path: http://192.168.139.68:15672/js/json2-2016.10.28.js&#xa;    Line number: 88&#xa;    Comment: &#xa;        &#xa;        //          text = JSON.stringify([new Date()], function (key, value) {&#xa;    &#xa;    Path: http://192.168.139.68:15672/js/main.js&#xa;    Line number: 1417&#xa;    Comment: &#xa;        &#xa;        // DTRT for chars &gt; 127). So encode a unicode string as a UTF-8&#xa;    &#xa;    Path: http://192.168.139.68:15672/js/json2-2016.10.28.js&#xa;    Line number: 82&#xa;    Comment: &#xa;        &#xa;        //          text = JSON.stringify([&quot;e&quot;, {pluribus: &quot;unum&quot;}]);&#xa;    &#xa;    Path: http://192.168.139.68:15672/js/sammy-0.7.6.min.js&#xa;    Line number: 4&#xa;    Comment: &#xa;        &#xa;        // Built: 2014-08-26 10:45:34 +0300&#xa;    &#xa;    Path: http://192.168.139.68:15672/js/main.js&#xa;    Line number: 1415&#xa;    Comment: &#xa;        &#xa;        // Our base64 library takes a string that is really a byte sequence,&#xa;    &#xa;    Path: http://192.168.139.68:15672/js/charts.js&#xa;    Line number: 3&#xa;    Comment: &#xa;        &#xa;        //&#xa;    &#xa;    Path: http://192.168.139.68:15672/js/main.js&#xa;    Line number: 604&#xa;    Comment: &#xa;         // If there&apos;s interaction, reset the counter.&#xa;    &#xa;    Path: http://192.168.139.68:15672/js/json2-2016.10.28.js&#xa;    Line number: 348&#xa;    Comment: &#xa;        &#xa;        // Join all of the member texts together, separated with commas,&#xa;    &#xa;    Path: http://192.168.139.68:15672/js/sammy-0.7.6.min.js&#xa;    Line number: 2&#xa;    Comment: &#xa;        &#xa;        // http://sammyjs.org&#xa;    &#xa;    Path: http://192.168.139.68:15672/css/main.css&#xa;    Line number: 188&#xa;    Comment: &#xa;        /* yellow-dark and green-dark can never happen */&#xa;    &#xa;    Path: http://192.168.139.68:15672/js/prefs.js&#xa;    Line number: 162&#xa;    Comment: &#xa;         // Convert to 32bit integer&#xa;    &#xa;    Path: http://192.168.139.68:15672/js/json2-2016.10.28.js&#xa;    Line number: 229&#xa;    Comment: &#xa;         // The member value.&#xa;    &#xa;    Path: http://192.168.139.68:15672/js/main.js&#xa;    Line number: 469&#xa;    Comment: &#xa;        /* Skip known keys we already handled and undefined parameters. */&#xa;    &#xa;    Path: http://192.168.139.68:15672/js/json2-2016.10.28.js&#xa;    Line number: 72&#xa;    Comment: &#xa;        &#xa;        //          The optional space parameter produces a stringification of the&#xa;    &#xa;    Path: http://192.168.139.68:15672/js/prefs.js&#xa;    Line number: 149&#xa;    Comment: &#xa;        &#xa;        // Try to economise on space since cookies have limited length.&#xa;    &#xa;    Path: http://192.168.139.68:15672/js/json2-2016.10.28.js&#xa;    Line number: 151&#xa;    Comment: &#xa;        &#xa;        // Create a JSON object only if one does not already exist. We create the&#xa;    &#xa;    Path: http://192.168.139.68:15672/js/prefs.js&#xa;    Line number: 83&#xa;    Comment: &#xa;        &#xa;        // -&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#xa;    &#xa;    Path: http://192.168.139.68:15672/js/json2-2016.10.28.js&#xa;    Line number: 284&#xa;    Comment: &#xa;        &#xa;        // Make an array to hold the partial results of stringifying this object value.&#xa;    &#xa;    Path: http://192.168.139.68:15672/js/json2-2016.10.28.js&#xa;    Line number: 4&#xa;    Comment: &#xa;        &#xa;        //  NO WARRANTY EXPRESSED OR IMPLIED. USE AT YOUR OWN RISK.&#xa;    &#xa;    Path: http://192.168.139.68:15672/js/main.js&#xa;    Line number: 105&#xa;    Comment: &#xa;         //&#xa;    &#xa;    Path: http://192.168.139.68:15672/js/json2-2016.10.28.js&#xa;    Line number: 493&#xa;    Comment: &#xa;        &#xa;        // In the optional fourth stage, we recursively walk the new structure, passing&#xa;    &#xa;    Path: http://192.168.139.68:15672/js/global.js&#xa;    Line number: 495&#xa;    Comment: &#xa;         // ...user cannot monitor&#xa;    &#xa;    Path: http://192.168.139.68:15672/js/charts.js&#xa;    Line number: 2&#xa;    Comment: &#xa;        &#xa;        // Formatting side&#xa;    &#xa;    Path: http://192.168.139.68:15672/js/json2-2016.10.28.js&#xa;    Line number: 101&#xa;    Comment: &#xa;        &#xa;        //          and its return value is used instead of the original value.&#xa;    &#xa;    Path: http://192.168.139.68:15672/js/json2-2016.10.28.js&#xa;    Line number: 35&#xa;    Comment: &#xa;        &#xa;        //          bound to the value.&#xa;    &#xa;    Path: http://192.168.139.68:15672/js/json2-2016.10.28.js&#xa;    Line number: 136&#xa;    Comment: &#xa;        &#xa;        //  This is a reference implementation. You are free to copy, modify, or&#xa;    &#xa;    Path: http://192.168.139.68:15672/js/json2-2016.10.28.js&#xa;    Line number: 25&#xa;    Comment: &#xa;        &#xa;        //                      it will specify the number of spaces to indent at each&#xa;    &#xa;    Path: http://192.168.139.68:15672/js/global.js&#xa;    Line number: 485&#xa;    Comment: &#xa;        &#xa;        ///////////////////////////////////////////////////////////////////////////&#xa;    &#xa;    Path: http://192.168.139.68:15672/js/global.js&#xa;    Line number: 600&#xa;    Comment: &#xa;        &#xa;        // What is our current sort order&#xa;    &#xa;    Path: http://192.168.139.68:15672/js/json2-2016.10.28.js&#xa;    Line number: 2&#xa;    Comment: &#xa;        &#xa;        //  2016-10-28&#xa;    &#xa;    Path: http://192.168.139.68:15672/js/json2-2016.10.28.js&#xa;    Line number: 473&#xa;    Comment: &#xa;        &#xa;        // open brackets that follow a colon or comma or that begin the text. Finally,&#xa;    &#xa;    Path: http://192.168.139.68:15672/js/jquery.flot-0.8.1.min.js&#xa;    Line number: 21&#xa;    Comment: &#xa;         // returns &quot;rgba(100,50,25,0.4)&quot;&#xa;    &#xa;    Path: http://192.168.139.68:15672/js/main.js&#xa;    Line number: 99&#xa;    Comment: &#xa;         // should get installed when the app is started. But it&apos;s guarded&#xa;    &#xa;    Path: http://192.168.139.68:15672/js/json2-2016.10.28.js&#xa;    Line number: 466&#xa;    Comment: &#xa;        &#xa;        // because they can cause invocation, and &quot;=&quot; because it can cause mutation.&#xa;    &#xa;    Path: http://192.168.139.68:15672/js/json2-2016.10.28.js&#xa;    Line number: 453&#xa;    Comment: &#xa;        &#xa;        // incorrectly, either silently deleting them, or treating them as line endings.&#xa;    &#xa;    Path: http://192.168.139.68:15672/js/global.js&#xa;    Line number: 506&#xa;    Comment: &#xa;        &#xa;        // The dispatcher needs access to the Sammy app&#xa;    &#xa;    Path: http://192.168.139.68:15672/js/formatters.js&#xa;    Line number: 214&#xa;    Comment: &#xa;         // to avoid errors, if someone calls fmt_num_thousands(someNumber.toFixed(0))&#xa;    &#xa;    Path: http://192.168.139.68:15672/js/json2-2016.10.28.js&#xa;    Line number: 225&#xa;    Comment: &#xa;        &#xa;        // Produce a string from holder[key].&#xa;    &#xa;    Path: http://192.168.139.68:15672/js/json2-2016.10.28.js&#xa;    Line number: 451&#xa;    Comment: &#xa;        &#xa;        // Parsing happens in four stages. In the first stage, we replace certain&#xa;    &#xa;    Path: http://192.168.139.68:15672/js/json2-2016.10.28.js&#xa;    Line number: 429&#xa;    Comment: &#xa;        &#xa;        // The walk method is used to recursively walk the resulting structure so&#xa;    &#xa;    Path: http://192.168.139.68:15672/js/json2-2016.10.28.js&#xa;    Line number: 41&#xa;    Comment: &#xa;        &#xa;        //                      // Format integers to have at least two digits.&#xa;    &#xa;    Path: http://192.168.139.68:15672/js/json2-2016.10.28.js&#xa;    Line number: 422&#xa;    Comment: &#xa;        &#xa;        // The parse method takes a text and an optional reviver function, and returns&#xa;    &#xa;    Path: http://192.168.139.68:15672/js/json2-2016.10.28.js&#xa;    Line number: 14&#xa;    Comment: &#xa;        &#xa;        //  If a project might run on IE8 or earlier, then this file should be included.&#xa;    &#xa;    Path: http://192.168.139.68:15672/js/json2-2016.10.28.js&#xa;    Line number: 379&#xa;    Comment: &#xa;        &#xa;        // produce text that is more easily readable.&#xa;    &#xa;    Path: http://192.168.139.68:15672/js/json2-2016.10.28.js&#xa;    Line number: 364&#xa;    Comment: &#xa;         // table of character substitutions&#xa;    &#xa;    Path: http://192.168.139.68:15672/js/json2-2016.10.28.js&#xa;    Line number: 12&#xa;    Comment: &#xa;        &#xa;        //  This file creates a global JSON object containing two methods: stringify&#xa;    &#xa;    Path: http://192.168.139.68:15672/js/json2-2016.10.28.js&#xa;    Line number: 112&#xa;    Comment: &#xa;        &#xa;        //              if (typeof value === &quot;string&quot;) {&#xa;    &#xa;    Path: http://192.168.139.68:15672/js/json2-2016.10.28.js&#xa;    Line number: 399&#xa;    Comment: &#xa;        &#xa;        // If there is a replacer, it must be a function or an array.&#xa;    &#xa;    Path: http://192.168.139.68:15672/js/main.js&#xa;    Line number: 111&#xa;    Comment: &#xa;         // just leave the history here.&#xa;    &#xa;    Path: http://192.168.139.68:15672/js/json2-2016.10.28.js&#xa;    Line number: 393&#xa;    Comment: &#xa;        &#xa;        // If the space parameter is a string, it will be used as the indent string.&#xa;    &#xa;    Path: http://192.168.139.68:15672/js/global.js&#xa;    Line number: 590&#xa;    Comment: &#xa;        &#xa;        // And which of those have yet to return (so we can cancel them when&#xa;    &#xa;    Path: http://192.168.139.68:15672/js/main.js&#xa;    Line number: 106&#xa;    Comment: &#xa;         // Note for when we upgrade: HashLocationProxy has become&#xa;    &#xa;    Path: http://192.168.139.68:15672/js/main.js&#xa;    Line number: 97&#xa;    Comment: &#xa;         // in modern browsers, and falls back to an icky polling function&#xa;    &#xa;    Path: http://192.168.139.68:15672/js/json2-2016.10.28.js&#xa;    Line number: 268&#xa;    Comment: &#xa;        &#xa;        // the remote chance that this gets fixed someday.&#xa;    &#xa;    Path: http://192.168.139.68:15672/js/json2-2016.10.28.js&#xa;    Line number: 110&#xa;    Comment: &#xa;        &#xa;        //          myData = JSON.parse(text, function (key, value) {&#xa;    &#xa;    Path: http://192.168.139.68:15672/js/json2-2016.10.28.js&#xa;    Line number: 95&#xa;    Comment: &#xa;        &#xa;        //      JSON.parse(text, reviver)&#xa;    &#xa;    Path: http://192.168.139.68:15672/js/json2-2016.10.28.js&#xa;    Line number: 49&#xa;    Comment: &#xa;        &#xa;        //                       f(this.getUTCHours())     + &quot;:&quot; +&#xa;    &#xa;    Path: http://192.168.139.68:15672/js/json2-2016.10.28.js&#xa;    Line number: 377&#xa;    Comment: &#xa;        &#xa;        // that can replace values, or an array of strings that will select the keys.&#xa;    &#xa;    Path: http://192.168.139.68:15672/js/main.js&#xa;    Line number: 1158&#xa;    Comment: &#xa;         // MSIE7 and 8 appear to do this in response to HTTP 204.&#xa;    &#xa;    Path: http://192.168.139.68:15672/js/json2-2016.10.28.js&#xa;    Line number: 313&#xa;    Comment: &#xa;        &#xa;        // If the replacer is an array, use it to select the members to be stringified.&#xa;    &#xa;    Path: http://192.168.139.68:15672/js/charts.js&#xa;    Line number: 291&#xa;    Comment: &#xa;         // duplicated entries). Do we care? We should just&#xa;    &#xa;    Path: http://192.168.139.68:15672/js/json2-2016.10.28.js&#xa;    Line number: 301&#xa;    Comment: &#xa;        &#xa;        // Join all of the elements together, separated with commas, and wrap them in&#xa;    &#xa;    Path: http://192.168.139.68:15672/js/json2-2016.10.28.js&#xa;    Line number: 486&#xa;    Comment: &#xa;        &#xa;        // In the third stage we use the eval function to compile the text into a&#xa;    &#xa;    Path: http://192.168.139.68:15672/js/json2-2016.10.28.js&#xa;    Line number: 76&#xa;    Comment: &#xa;        &#xa;        //          If the space parameter is a non-empty string, then that string will&#xa;    &#xa;    Path: http://192.168.139.68:15672/js/json2-2016.10.28.js&#xa;    Line number: 143&#xa;    Comment: &#xa;        /*property&#xa;            JSON, apply, call, charCodeAt, getUTCDate, getUTCFullYear, getUTCHours,&#xa;            getUTCMinutes, getUTCMonth, getUTCSeconds, hasOwnProperty, join,&#xa;            lastIndex, length, parse, prototype, push, replace, slice, stringify,&#xa;            test, toJSON, toString, valueOf&#xa;        */&#xa;    &#xa;    Path: http://192.168.139.68:15672/js/json2-2016.10.28.js&#xa;    Line number: 501&#xa;    Comment: &#xa;        &#xa;        // If the text is not JSON parseable, then a SyntaxError is thrown.&#xa;    &#xa;    Path: http://192.168.139.68:15672/js/global.js&#xa;    Line number: 578&#xa;    Comment: &#xa;        &#xa;        ////////////////////////////////////////////////////&#xa;    &#xa;    Path: http://192.168.139.68:15672/js/json2-2016.10.28.js&#xa;    Line number: 129&#xa;    Comment: &#xa;        &#xa;        //                  if (d) {&#xa;    &#xa;    Path: http://192.168.139.68:15672/js/main.js&#xa;    Line number: 1402&#xa;    Comment: &#xa;        &#xa;        // Don&apos;t use the jQuery AJAX support, it seems to have trouble reporting&#xa;    &#xa;    Path: http://192.168.139.68:15672/js/json2-2016.10.28.js&#xa;    Line number: 272&#xa;    Comment: &#xa;        &#xa;        // If the type is &quot;object&quot;, we might be dealing with an object or an array or&#xa;    &#xa;    Path: http://192.168.139.68:15672/js/json2-2016.10.28.js&#xa;    Line number: 114&#xa;    Comment: &#xa;        &#xa;        //   /^(\d{4})-(\d{2})-(\d{2})T(\d{2}):(\d{2}):(\d{2}(?:\.\d*)?)Z$/.exec(value);&#xa;    &#xa;    Path: http://192.168.139.68:15672/js/json2-2016.10.28.js&#xa;    Line number: 249&#xa;    Comment: &#xa;        &#xa;        // What happens next depends on the value&apos;s type.&#xa;    &#xa;    Path: http://192.168.139.68:15672/js/json2-2016.10.28.js&#xa;    Line number: 235&#xa;    Comment: &#xa;        &#xa;        // If the value has a toJSON method, call it to obtain a replacement value.&#xa;    &#xa;    Path: http://192.168.139.68:15672/js/base64.js&#xa;    Line number: 54&#xa;    Comment: &#xa;         //   object with properties mapping chars to value (eg. &apos;A&apos;: 0)&#xa;    &#xa;    Path: http://192.168.139.68:15672/js/json2-2016.10.28.js&#xa;    Line number: 227&#xa;    Comment: &#xa;         // The loop counter.&#xa;    &#xa;    Path: http://192.168.139.68:15672/js/json2-2016.10.28.js&#xa;    Line number: 208&#xa;    Comment: &#xa;        &#xa;        // Otherwise we must also replace the offending characters with safe escape&#xa;    &#xa;    Path: http://192.168.139.68:15672/js/global.js&#xa;    Line number: 503&#xa;    Comment: &#xa;        &#xa;        // We need to know when all extension script files have loaded&#xa;    &#xa;    Path: http://192.168.139.68:15672/js/charts.js&#xa;    Line number: 166&#xa;    Comment: &#xa;         // status-bar&#xa;    &#xa;    Path: http://192.168.139.68:15672/js/json2-2016.10.28.js&#xa;    Line number: 206&#xa;    Comment: &#xa;        &#xa;        // If the string contains no control characters, no quote characters, and no&#xa;    &#xa;    Path: http://192.168.139.68:15672/js/json2-2016.10.28.js&#xa;    Line number: 41&#xa;    Comment: &#xa;         // Format integers to have at least two digits.&#xa;    &#xa;    Path: http://192.168.139.68:15672/js/base64.js&#xa;    Line number: 53&#xa;    Comment: &#xa;         //  Minimal or no improvement in performance by using a&#xa;    &#xa;    Path: http://192.168.139.68:15672/js/main.js&#xa;    Line number: 190&#xa;    Comment: &#xa;         // Prevent DoS if cookie malformed&#xa;    &#xa;    Path: http://192.168.139.68:15672/js/json2-2016.10.28.js&#xa;    Line number: 293&#xa;    Comment: &#xa;        &#xa;        // The value is an array. Stringify every element. Use null as a placeholder&#xa;    &#xa;    Path: http://192.168.139.68:15672/js/json2-2016.10.28.js&#xa;    Line number: 86&#xa;    Comment: &#xa;         // text is &apos;[\n\t&quot;e&quot;,\n\t{\n\t\t&quot;pluribus&quot;: &quot;unum&quot;\n\t}\n]&apos;&#xa;    &#xa;    Path: http://192.168.139.68:15672/js/ejs-1.0.min.js&#xa;    Line number: 1&#xa;    Comment: &#xa;        /*&quot;+name+&quot;*/&#xa;    &#xa;    Path: http://192.168.139.68:15672/js/json2-2016.10.28.js&#xa;    Line number: 127&#xa;    Comment: &#xa;        &#xa;        //                      value.slice(-1) === &quot;)&quot;) {&#xa;    &#xa;    Path: http://192.168.139.68:15672/js/main.js&#xa;    Line number: 38&#xa;    Comment: &#xa;         // we&apos;ll end up doing that at the bottom of start_app_login after&#xa;    &#xa;    Path: http://192.168.139.68:15672/js/json2-2016.10.28.js&#xa;    Line number: 29&#xa;    Comment: &#xa;        &#xa;        //          When an object value is found, if the object contains a toJSON&#xa;    &#xa;    Path: http://192.168.139.68:15672/js/global.js&#xa;    Line number: 492&#xa;    Comment: &#xa;         // ...there are no fine stats&#xa;    &#xa;    Path: http://192.168.139.68:15672/js/main.js&#xa;    Line number: 110&#xa;    Comment: &#xa;         // updated to the version  0.7.6 this _interval = null is fixed&#xa;    &#xa;    Path: http://192.168.139.68:15672/js/base64.js&#xa;    Line number: 63&#xa;    Comment: &#xa;         // convert to string&#xa;    &#xa;    Path: http://192.168.139.68:15672/js/charts.js&#xa;    Line number: 290&#xa;    Comment: &#xa;         // the data we have in the DB (and thus we get&#xa;    &#xa;    Path: http://192.168.139.68:15672/js/main.js&#xa;    Line number: 1423&#xa;    Comment: &#xa;        &#xa;        // encodeURIComponent handles utf-8, unescape does not. Neat!&#xa;    &#xa;    Path: http://192.168.139.68:15672/js/json2-2016.10.28.js&#xa;    Line number: 123&#xa;    Comment: &#xa;        &#xa;        //          myData = JSON.parse(&apos;[&quot;Date(09/09/2001)&quot;]&apos;, function (key, value) {&#xa;    &#xa;    Path: http://192.168.139.68:15672/js/json2-2016.10.28.js&#xa;    Line number: 120&#xa;    Comment: &#xa;        &#xa;        //              return value;&#xa;    &#xa;    Path: http://192.168.139.68:15672/js/main.js&#xa;    Line number: 37&#xa;    Comment: &#xa;         // because we change url, we don&apos;t need to hit check_login as&#xa;    &#xa;    Path: http://192.168.139.68:15672/js/json2-2016.10.28.js&#xa;    Line number: 266&#xa;    Comment: &#xa;        &#xa;        // If the value is a boolean or null, convert it to a string. Note:&#xa;    &#xa;    Path: http://192.168.139.68:15672/js/global.js&#xa;    Line number: 497&#xa;    Comment: &#xa;         // ...there is only one vhost&#xa;    &#xa;    Path: http://192.168.139.68:15672/js/json2-2016.10.28.js&#xa;    Line number: 47&#xa;    Comment: &#xa;        &#xa;        //                       f(this.getUTCMonth() + 1) + &quot;-&quot; +&#xa;    &#xa;    Path: http://192.168.139.68:15672/js/json2-2016.10.28.js&#xa;    Line number: 409&#xa;    Comment: &#xa;        &#xa;        // Make a fake root object containing our value under the key of &quot;&quot;.&#xa;    &#xa;    Path: http://192.168.139.68:15672/js/charts.js&#xa;    Line number: 289&#xa;    Comment: &#xa;         // stuff in the browser that is finer granularity than&#xa;    &#xa;    Path: http://192.168.139.68:15672/js/global.js&#xa;    Line number: 2&#xa;    Comment: &#xa;        &#xa;        //                   //&#xa;    &#xa;    Path: http://192.168.139.68:15672/js/global.js&#xa;    Line number: 493&#xa;    Comment: &#xa;         // ...user is not an admin&#xa;    &#xa;    Path: http://192.168.139.68:15672/js/json2-2016.10.28.js&#xa;    Line number: 107&#xa;    Comment: &#xa;        &#xa;        //          // Parse the text. Values that look like ISO date strings will&#xa;    &#xa;    Path: http://192.168.139.68:15672/js/main.js&#xa;    Line number: 899&#xa;    Comment: &#xa;         // prevents the first slideToggle() from animating&#xa;    &#xa;    Path: http://192.168.139.68:15672/js/global.js&#xa;    Line number: 491&#xa;    Comment: &#xa;        &#xa;        // All these are to do with hiding UI elements if&#xa;    &#xa;    Path: http://192.168.139.68:15672/js/main.js&#xa;    Line number: 98&#xa;    Comment: &#xa;         // in MSIE. But it looks like there&apos;s a bug. The polling function&#xa;    &#xa;    Path: http://192.168.139.68:15672/js/json2-2016.10.28.js&#xa;    Line number: 19&#xa;    Comment: &#xa;        &#xa;        //          replacer    an optional parameter that determines how object&#xa;    &#xa;    Path: http://192.168.139.68:15672/js/json2-2016.10.28.js&#xa;    Line number: 65&#xa;    Comment: &#xa;        &#xa;        //          Values that do not have JSON representations, such as undefined or&#xa;    &#xa;    Path: http://192.168.139.68:15672/js/json2-2016.10.28.js&#xa;    Line number: 93&#xa;    Comment: &#xa;         // text is &apos;[&quot;Date(-&#45;&#45;current time-&#45;&#45;)&quot;]&apos;&#xa;    &#xa;    Path: http://192.168.139.68:15672/js/json2-2016.10.28.js&#xa;    Line number: 90&#xa;    Comment: &#xa;        &#xa;        //                  ? &quot;Date(&quot; + this[key] + &quot;)&quot;&#xa;    &#xa;    Path: http://192.168.139.68:15672/js/json2-2016.10.28.js&#xa;    Line number: 9&#xa;    Comment: &#xa;        &#xa;        //  USE YOUR OWN COPY. IT IS EXTREMELY UNWISE TO LOAD CODE FROM SERVERS YOU DO&#xa;    &#xa;    Path: http://192.168.139.68:15672/js/main.js&#xa;    Line number: 104&#xa;    Comment: &#xa;         // Filed as https://github.com/quirkey/sammy/issues/171&#xa;    &#xa;    Path: http://192.168.139.68:15672/js/json2-2016.10.28.js&#xa;    Line number: 85&#xa;    Comment: &#xa;        &#xa;        //          text = JSON.stringify([&quot;e&quot;, {pluribus: &quot;unum&quot;}], null, &quot;\t&quot;);&#xa;    &#xa;    Path: http://192.168.139.68:15672/js/json2-2016.10.28.js&#xa;    Line number: 83&#xa;    Comment: &#xa;         // text is &apos;[&quot;e&quot;,{&quot;pluribus&quot;:&quot;unum&quot;}]&apos;&#xa;    &#xa;    Path: http://192.168.139.68:15672/js/json2-2016.10.28.js&#xa;    Line number: 74&#xa;    Comment: &#xa;        &#xa;        //          easier to read.&#xa;    &#xa;    Path: http://192.168.139.68:15672/js/global.js&#xa;    Line number: 496&#xa;    Comment: &#xa;         // ...we are not in a cluster&#xa;    &#xa;    Path: http://192.168.139.68:15672/js/json2-2016.10.28.js&#xa;    Line number: 99&#xa;    Comment: &#xa;        &#xa;        //          The optional reviver parameter is a function that can filter and&#xa;    &#xa;    Path: http://192.168.139.68:15672/js/json2-2016.10.28.js&#xa;    Line number: 60&#xa;    Comment: &#xa;        &#xa;        //          If the replacer parameter is an array of strings, then it will be&#xa;    &#xa;    Path: http://192.168.139.68:15672/&#xa;    Line number: 22&#xa;    Comment: &#xa;        &lt;!-&#45;[if lte IE 8]&gt;&#xa;            &lt;script src=&quot;js/excanvas.min.js&quot; type=&quot;text/javascript&quot;&gt;&lt;/script&gt;&#xa;            &lt;link href=&quot;css/evil.css&quot; rel=&quot;stylesheet&quot; type=&quot;text/css&quot;/&gt;&#xa;        &lt;![endif]-&#45;&gt;&#xa;    &#xa;    Path: http://192.168.139.68:15672/js/global.js&#xa;    Line number: 614&#xa;    Comment: &#xa;        &#xa;        // When did we last connect successfully (for the &quot;could not connect&quot; error)&#xa;    &#xa;    Path: http://192.168.139.68:15672/js/json2-2016.10.28.js&#xa;    Line number: 56&#xa;    Comment: &#xa;        &#xa;        //          object. The value that is returned from your method will be&#xa;    &#xa;    Path: http://192.168.139.68:15672/js/global.js&#xa;    Line number: 494&#xa;    Comment: &#xa;         // ...user is not a policymaker&#xa;    &#xa;    Path: http://192.168.139.68:15672/js/main.js&#xa;    Line number: 1140&#xa;    Comment: &#xa;         // http://support.microsoft.com/kb/186063&#xa;    &#xa;    Path: http://192.168.139.68:15672/js/jquery.flot-0.8.1.time.min.js&#xa;    Line number: 1&#xa;    Comment: &#xa;        /* Pretty handling of time axes.&#xa;        &#xa;        Copyright (c) 2007-2013 IOLA and Ole Laursen.&#xa;        Licensed under the MIT license.&#xa;        &#xa;        Set axis.mode to &quot;time&quot; to enable. See the section &quot;Time series data&quot; in&#xa;        API.txt for details.&#xa;        &#xa;        */&#xa;    &#xa;    Path: http://192.168.139.68:15672/js/main.js&#xa;    Line number: 112&#xa;    Comment: &#xa;         //Sammy.HashLocationProxy._interval = null;&#xa;    &#xa;    Path: http://192.168.139.68:15672/js/json2-2016.10.28.js&#xa;    Line number: 54&#xa;    Comment: &#xa;        &#xa;        //          You can provide an optional replacer method. It will be passed the&#xa;    &#xa;    Path: http://192.168.139.68:15672/js/json2-2016.10.28.js&#xa;    Line number: 385&#xa;    Comment: &#xa;        &#xa;        // If the space parameter is a number, make an indent string containing that&#xa;    &#xa;    Path: http://192.168.139.68:15672/js/main.js&#xa;    Line number: 341&#xa;    Comment: &#xa;         // We&apos;ll end up not showing it anyway&#xa;    &#xa;    Path: http://192.168.139.68:15672/js/json2-2016.10.28.js&#xa;    Line number: 289&#xa;    Comment: &#xa;        &#xa;        // Is the value an array?&#xa;    &#xa;    Path: http://192.168.139.68:15672/js/main.js&#xa;    Line number: 39&#xa;    Comment: &#xa;         // we&apos;ve changed url.&#xa;    &#xa;    Path: http://192.168.139.68:15672/js/global.js&#xa;    Line number: 587&#xa;    Comment: &#xa;        &#xa;        // Which JSON requests do we need to populate it&#xa;    &#xa;    Path: http://192.168.139.68:15672/js/base64.js&#xa;    Line number: 52&#xa;    Comment: &#xa;         // This is oddly fast, except on Chrome/V8.&#xa;    &#xa;    Path: http://192.168.139.68:15672/js/main.js&#xa;    Line number: 1066&#xa;    Comment: &#xa;         // navigate to the login form&#xa;    &#xa;    Path: http://192.168.139.68:15672/js/json2-2016.10.28.js&#xa;    Line number: 488&#xa;    Comment: &#xa;        &#xa;        // in JavaScript: it can begin a block or an object literal. We wrap the text&#xa;    &#xa;    Path: http://192.168.139.68:15672/js/json2-2016.10.28.js&#xa;    Line number: 33&#xa;    Comment: &#xa;        &#xa;        //          or undefined if nothing should be serialized. The toJSON method&#xa;    &#xa;    Path: http://192.168.139.68:15672/js/jquery-1.12.4.min.js&#xa;    Line number: 1&#xa;    Comment: &#xa;        /*! jQuery v1.12.4 | (c) jQuery Foundation | jquery.org/license */&#xa;    &#xa;    Path: http://192.168.139.68:15672/js/json2-2016.10.28.js&#xa;    Line number: 125&#xa;    Comment: &#xa;        &#xa;        //              if (typeof value === &quot;string&quot; &amp;&amp;&#xa;    &#xa;    Path: http://192.168.139.68:15672/js/global.js&#xa;    Line number: 622&#xa;    Comment: &#xa;        &#xa;        // Holds chart data in between writing the div in an ejs and rendering&#xa;    &#xa;    Path: http://192.168.139.68:15672/js/main.js&#xa;    Line number: 1196&#xa;    Comment: &#xa;         // Non-MSIE: could not connect&#xa;    &#xa;    Path: http://192.168.139.68:15672/js/json2-2016.10.28.js&#xa;    Line number: 62&#xa;    Comment: &#xa;        &#xa;        //          such that only members with keys listed in the replacer array are&#xa;    &#xa;    Path: http://192.168.139.68:15672/js/charts.js&#xa;    Line number: 292&#xa;    Comment: &#xa;         // never allow that...&#xa;    &#xa;    Path: http://192.168.139.68:15672/js/json2-2016.10.28.js&#xa;    Line number: 21&#xa;    Comment: &#xa;        &#xa;        //                      function or an array of strings.&#xa;    &#xa;    Path: http://192.168.139.68:15672/js/main.js&#xa;    Line number: 900&#xa;    Comment: &#xa;         // successfully; instead the element just vanishes.&#xa;    &#xa;    Path: http://192.168.139.68:15672/js/main.js&#xa;    Line number: 101&#xa;    Comment: &#xa;         // course that&apos;s not specific to the application; it&apos;s pretty&#xa;    &#xa;    Path: http://192.168.139.68:15672/js/global.js&#xa;    Line number: 512&#xa;    Comment: &#xa;        &#xa;        // Used for access control&#xa;    &#xa;    Path: http://192.168.139.68:15672/js/main.js&#xa;    Line number: 95&#xa;    Comment: &#xa;         // Oh boy. Sammy uses various different methods to determine if&#xa;    &#xa;    Path: http://192.168.139.68:15672/js/global.js&#xa;    Line number: 27&#xa;    Comment: &#xa;        &#xa;        // Things that are like arguments that we format the same way in listings.&#xa;    &#xa;    Path: http://192.168.139.68:15672/js/global.js&#xa;    Line number: 16&#xa;    Comment: &#xa;        &#xa;        // Extension arguments that we know about and present specially in the UI.&#xa;    &#xa;    Path: http://192.168.139.68:15672/js/main.js&#xa;    Line number: 96&#xa;    Comment: &#xa;         // the URL hash has changed. Unsurprisingly this is a native event&#xa;    &#xa;    Path: http://192.168.139.68:15672/js/json2-2016.10.28.js&#xa;    Line number: 417&#xa;    Comment: &#xa;        &#xa;        // If the JSON object does not yet have a parse method, give it one.&#xa;    &#xa;    Path: http://192.168.139.68:15672/js/global.js&#xa;    Line number: 594&#xa;    Comment: &#xa;        &#xa;        // Which tab is highlighted&#xa;    &#xa;    Path: http://192.168.139.68:15672/js/charts.js&#xa;    Line number: 312&#xa;    Comment: &#xa;         // axis.ticks seems to include the bottom value but not the top&#xa;    &#xa;    Path: http://192.168.139.68:15672/js/json2-2016.10.28.js&#xa;    Line number: 277&#xa;    Comment: &#xa;        &#xa;        // Due to a specification blunder in ECMAScript, typeof null is &quot;object&quot;,&#xa;    &#xa;    Path: http://192.168.139.68:15672/js/json2-2016.10.28.js&#xa;    Line number: 108&#xa;    Comment: &#xa;         // be converted to Date objects.&#xa;    &#xa;    Path: http://192.168.139.68:15672/js/main.js&#xa;    Line number: 898&#xa;    Comment: &#xa;         // display:block anyway, not explicitly setting this&#xa;    &#xa;    Path: http://192.168.139.68:15672/js/main.js&#xa;    Line number: 467&#xa;    Comment: &#xa;        /* Unknown options are used as query parameters as is. */&#xa;    &#xa;    Path: http://192.168.139.68:15672/js/main.js&#xa;    Line number: 108&#xa;    Comment: &#xa;         // remains.&#xa;    &#xa;    Path: http://192.168.139.68:15672/js/global.js&#xa;    Line number: 516&#xa;    Comment: &#xa;        &#xa;        // Set up the above vars&#xa;    &#xa;    Path: http://192.168.139.68:15672/js/global.js&#xa;    Line number: 566&#xa;    Comment: &#xa;         // Note deliberate fall-through&#xa;    &#xa;    Path: http://192.168.139.68:15672/js/main.js&#xa;    Line number: 1243&#xa;    Comment: &#xa;         // Do nothing, value is handled below&#xa;    &#xa;    Path: http://192.168.139.68:15672/js/json2-2016.10.28.js&#xa;    Line number: 45&#xa;    Comment: &#xa;        &#xa;        //                  }&#xa;    &#xa;    Path: http://192.168.139.68:15672/js/json2-2016.10.28.js&#xa;    Line number: 475&#xa;    Comment: &#xa;        &#xa;        // &quot;,&quot; or &quot;:&quot; or &quot;{&quot; or &quot;}&quot;. If that is so, then the text is safe for eval.&#xa;    &#xa;    Path: http://192.168.139.68:15672/js/json2-2016.10.28.js&#xa;    Line number: 58&#xa;    Comment: &#xa;        &#xa;        //          be excluded from the serialization.&#xa;    &#xa;    Path: http://192.168.139.68:15672/js/global.js&#xa;    Line number: 610&#xa;    Comment: &#xa;        &#xa;        // The timer object for auto-updates, and how often it goes off&#xa;    &#xa;    Path: http://192.168.139.68:15672/js/json2-2016.10.28.js&#xa;    Line number: 37&#xa;    Comment: &#xa;        &#xa;        //          For example, this would serialize Dates as ISO strings.&#xa;    &#xa;    Path: http://192.168.139.68:15672/js/base64.js&#xa;    Line number: 27&#xa;    Comment: &#xa;        /* base64 encode/decode compatible with window.btoa/atob&#xa;         *&#xa;         * window.atob/btoa is a Firefox extension to convert binary data (the &quot;b&quot;)&#xa;         * to base64 (ascii, the &quot;a&quot;).&#xa;         *&#xa;         * It is also found in Safari and Chrome.  It is not available in IE.&#xa;         *&#xa;         * if (!window.btoa) window.btoa = base64.encode&#xa;         * if (!window.atob) window.atob = base64.decode&#xa;         *&#xa;         * The original spec&apos;s for atob/btoa are a bit lacking&#xa;         * https://developer.mozilla.org/en/DOM/window.atob&#xa;         * https://developer.mozilla.org/en/DOM/window.btoa&#xa;         *&#xa;         * window.btoa and base64.encode takes a string where charCodeAt is [0,255]&#xa;         * If any character is not [0,255], then an exception is thrown.&#xa;         *&#xa;         * window.atob and base64.decode take a base64-encoded string&#xa;         * If the input length is not a multiple of 4, or contains invalid characters&#xa;         *   then an exception is thrown.&#xa;         */&#xa;    &#xa;    Path: http://192.168.139.68:15672/js/json2-2016.10.28.js&#xa;    Line number: 6&#xa;    Comment: &#xa;        &#xa;        //  This code should be minified before deployment.&#xa;    &#xa;    Path: http://192.168.139.68:15672/js/formatters.js&#xa;    Line number: 906&#xa;    Comment: &#xa;         // max&#xa;    &#xa;    Path: http://192.168.139.68:15672/js/base64.js&#xa;    Line number: 82&#xa;    Comment: &#xa;         // either way, we want to ignore this last block&#xa;    &#xa;    Path: http://192.168.139.68:15672/js/json2-2016.10.28.js&#xa;    Line number: 471&#xa;    Comment: &#xa;        &#xa;        // replace the JSON backslash pairs with &quot;@&quot; (a non-JSON character). Second, we&#xa;    &#xa;    Path: http://192.168.139.68:15672/js/main.js&#xa;    Line number: 107&#xa;    Comment: &#xa;         // DefaultLocationProxy in later versions, but otherwise the issue&#xa;    &#xa;    Path: http://192.168.139.68:15672/js/jquery.flot-0.8.1.min.js&#xa;    Line number: 8&#xa;    Comment: &#xa;        /* Plugin for jQuery for working with colors.&#xa;         *&#xa;         * Version 1.1.&#xa;         *&#xa;         * Inspiration from jQuery color animation plugin by John Resig.&#xa;         *&#xa;         * Released under the MIT license by Ole Laursen, October 2009.&#xa;         *&#xa;         * Examples:&#xa;         *&#xa;         *   $.color.parse(&quot;#fff&quot;).scale(&apos;rgb&apos;, 0.25).add(&apos;a&apos;, -0.5).toString()&#xa;         *   var c = $.color.extract($(&quot;#mydiv&quot;), &apos;background-color&apos;);&#xa;         *   console.log(c.r, c.g, c.b, c.a);&#xa;         *   $.color.make(100, 50, 25, 0.4).toString() // returns &quot;rgba(100,50,25,0.4)&quot;&#xa;         *&#xa;         * Note that .scale() and .add() return the same modified object&#xa;         * instead of making a new one.&#xa;         *&#xa;         * V. 1.1: Fix error handling so e.g. parsing an empty string does&#xa;         * produce a color rather than just crashing.&#xa;         */&#xa;    &#xa;    Path: http://192.168.139.68:15672/js/formatters.js&#xa;    Line number: 256&#xa;    Comment: &#xa;        &#xa;        // -&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#xa;    &#xa;    Path: http://192.168.139.68:15672/js/formatters.js&#xa;    Line number: 258&#xa;    Comment: &#xa;        &#xa;        // These are pluggable for charts etc&#xa;    &#xa;    Path: http://192.168.139.68:15672/js/main.js&#xa;    Line number: 25&#xa;    Comment: &#xa;         // 8 hours from now&#xa;    &#xa;    Path: http://192.168.139.68:15672/js/global.js&#xa;    Line number: 135&#xa;    Comment: &#xa;        &#xa;        // All help ? popups&#xa;    &#xa;    Path: http://192.168.139.68:15672/js/main.js&#xa;    Line number: 102&#xa;    Comment: &#xa;         // global. So we need to manually clear that in order for links to&#xa;    &#xa;    Path: http://192.168.139.68:15672/js/charts.js&#xa;    Line number: 164&#xa;    Comment: &#xa;         // status-bar-main&#xa;    &#xa;    Path: http://192.168.139.68:15672/js/global.js&#xa;    Line number: 617&#xa;    Comment: &#xa;        &#xa;        // Every 200 updates without user interaction we do a full refresh, to&#xa;    &#xa;    Path: http://192.168.139.68:15672/js/json2-2016.10.28.js&#xa;    Line number: 23&#xa;    Comment: &#xa;        &#xa;        //                      of nested structures. If it is omitted, the text will&#xa;    &#xa;    Path: http://192.168.139.68:15672/js/json2-2016.10.28.js&#xa;    Line number: 17&#xa;    Comment: &#xa;        &#xa;        //      JSON.stringify(value, replacer, space)&#xa;    &#xa;    Path: http://192.168.139.68:15672/js/global.js&#xa;    Line number: 498&#xa;    Comment: &#xa;         // ...all cluster nodes run the same version&#xa;    &#xa;    Path: http://192.168.139.68:15672/js/global.js&#xa;    Line number: 619&#xa;    Comment: &#xa;        &#xa;        // TODO: maybe we don&apos;t need this any more?&#xa;    &#xa;    Path: http://192.168.139.68:15672/js/jquery.flot-0.8.1.min.js&#xa;    Line number: 1&#xa;    Comment: &#xa;        /* Javascript plotting library for jQuery, version 0.8.1.&#xa;        &#xa;        Copyright (c) 2007-2013 IOLA and Ole Laursen.&#xa;        Licensed under the MIT license.&#xa;        &#xa;        */&#xa;    &#xa;    Path: http://192.168.139.68:15672/js/json2-2016.10.28.js&#xa;    Line number: 332&#xa;    Comment: &#xa;        &#xa;        // Otherwise, iterate through all of the keys in the object.&#xa;    &#xa;    Path: http://192.168.139.68:15672/js/main.js&#xa;    Line number: 1157&#xa;    Comment: &#xa;         // 1223 == 204 - see http://www.enhanceie.com/ie/bugs.asp&#xa;    &#xa;    Path: http://192.168.139.68:15672/js/global.js&#xa;    Line number: 509&#xa;    Comment: &#xa;        &#xa;        // Used for the new exchange form, and to display broken exchange types&#xa;"/><script id="http-dombased-xss" output="Couldn&apos;t find any DOM based XSS."/><script id="http-mobileversion-checker" output="No mobile version detected."/><script id="http-errors" output="Couldn&apos;t find any error pages."/><script id="http-jsonp-detection" output="Couldn&apos;t find any JSONP endpoints."/><script id="http-methods" output="&#xa;  Supported Methods: HEAD GET OPTIONS"><table key="Supported Methods">
<elem>HEAD</elem>
<elem>GET</elem>
<elem>OPTIONS</elem>
</table>
</script><script id="http-useragent-tester" output="&#xa;  Status for browser useragent: 200&#xa;  Allowed User Agents: &#xa;    Mozilla/5.0 (compatible; Nmap Scripting Engine; https://nmap.org/book/nse.html)&#xa;    libwww&#xa;    lwp-trivial&#xa;    libcurl-agent/1.0&#xa;    PHP/&#xa;    Python-urllib/2.5&#xa;    GT::WWW&#xa;    Snoopy&#xa;    MFC_Tear_Sample&#xa;    HTTP::Lite&#xa;    PHPCrawl&#xa;    URI::Fetch&#xa;    Zend_Http_Client&#xa;    http client&#xa;    PECL::HTTP&#xa;    Wget/1.13.4 (linux-gnu)&#xa;    WWW-Mechanize/1.34"><elem key="Status for browser useragent">200</elem>
<table key="Allowed User Agents">
<elem>Mozilla/5.0 (compatible; Nmap Scripting Engine; https://nmap.org/book/nse.html)</elem>
<elem>libwww</elem>
<elem>lwp-trivial</elem>
<elem>libcurl-agent/1.0</elem>
<elem>PHP/</elem>
<elem>Python-urllib/2.5</elem>
<elem>GT::WWW</elem>
<elem>Snoopy</elem>
<elem>MFC_Tear_Sample</elem>
<elem>HTTP::Lite</elem>
<elem>PHPCrawl</elem>
<elem>URI::Fetch</elem>
<elem>Zend_Http_Client</elem>
<elem>http client</elem>
<elem>PECL::HTTP</elem>
<elem>Wget/1.13.4 (linux-gnu)</elem>
<elem>WWW-Mechanize/1.34</elem>
</table>
</script><script id="http-drupal-enum" output="Nothing found amongst the top 100 resources,use -&#45;script-args number=&lt;number|all&gt; for deeper analysis)"/><script id="http-feed" output="Couldn&apos;t find any feeds."/><script id="http-csrf" output="Couldn&apos;t find any CSRF vulnerabilities."/><script id="http-chrono" output="Request times for /; avg: 625.56ms; min: 563.06ms; max: 706.91ms"/><script id="http-sitemap-generator" output="&#xa;  Directory structure:&#xa;    /&#xa;      Other: 1; ico: 1&#xa;    /css/&#xa;      css: 2&#xa;    /js/&#xa;      js: 13&#xa;  Longest directory structure:&#xa;    Depth: 1&#xa;    Dir: /js/&#xa;  Total files found (by extension):&#xa;    Other: 1; css: 2; ico: 1; js: 13&#xa;"/><script id="http-stored-xss" output="Couldn&apos;t find any stored XSS vulnerabilities."/><script id="http-fetch" output="Please enter the complete path of the directory to save data in."><elem key="ERROR">Please enter the complete path of the directory to save data in.</elem>
</script><script id="http-referer-checker" output="Couldn&apos;t find any cross-domain scripts."/><script id="http-date" output="Sun, 30 Jan 2022 09:06:22 GMT; -30m01s from local time."><elem key="date">2022-01-30T08:36:22+00:00</elem>
<elem key="delta">-1801.0</elem>
</script><script id="http-wordpress-users" output="[Error] Wordpress installation was not found. We couldn&apos;t find wp-login.php"/><script id="http-malware-host" output="Host appears to be clean"/><script id="http-title" output="RabbitMQ Management"><elem key="title">RabbitMQ Management</elem>
</script><script id="http-wordpress-enum" output="Nothing found amongst the top 100 resources,use -&#45;script-args search-limit=&lt;number|all&gt; for deeper analysis)"/><script id="http-litespeed-sourcecode-download" output="Page: /index.php was not found. Try with an existing file."/><script id="http-config-backup" output="ERROR: Script execution failed (use -d to debug)"/><script id="http-devframework" output="Couldn&apos;t determine the underlying framework or CMS. Try increasing &apos;httpspider.maxpagecount&apos; value to spider more pages."/><script id="http-favicon" output="Unknown favicon MD5: DDC75B0899DBF4F7B15290A77FBEB8FF"/><script id="http-headers" output="&#xa;  connection: close&#xa;  server: Cowboy&#xa;  date: Sun, 30 Jan 2022 09:06:20 GMT&#xa;  content-length: 1391&#xa;  content-type: text/html&#xa;  etag: &quot;3678489298&quot;&#xa;  last-modified: Wed, 10 Mar 2021 20:43:59 GMT&#xa;  &#xa;  (Request type: HEAD)&#xa;"/><script id="http-security-headers" output=""></script><script id="http-iis-webdav-vuln" output="WebDAV is DISABLED. Server is not currently vulnerable."/><script id="http-vhosts" output="&#xa;128 names had status 200"/></port>
</ports>
<times srtt="251393" rttvar="251393" to="1250000"/>
</host>
<taskbegin task="NSE" time="1643534142"/>
<taskend task="NSE" time="1643534142"/>
<taskbegin task="NSE" time="1643534142"/>
<taskend task="NSE" time="1643534142"/>
<taskbegin task="NSE" time="1643534142"/>
<taskend task="NSE" time="1643534142"/>
<runstats><finished time="1643534142" timestr="Sun Jan 30 17:15:42 2022" summary="Nmap done at Sun Jan 30 17:15:42 2022; 1 IP address (1 host up) scanned in 580.85 seconds" elapsed="580.85" exit="success"/><hosts up="1" down="0" total="1"/>
</runstats>
</nmaprun>
